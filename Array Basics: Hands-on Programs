//Traversing an Array
#include <stdio.h>

int main() {
    int n;
    printf("Enter size of array: ");
    scanf("%d", &n);

    int arr[n];   
    for (int i = 0; i < n; i++) {
        printf("Enter number: ");
        scanf("%d", &arr[i]);
    }
    printf("You entered: ");
    for (int j = 0; j < n; j++) {   
        printf("%d ", arr[j]);
    }
    return 0;
}

//Inserting an element in the Array
#include <stdio.h>

int main() {
    int a[100], n, value, pos;

    printf("Enter size of array: ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);

    printf("Enter position (1 to %d): ", n+1);
    scanf("%d", &pos);

    printf("Enter value to insert: ");
    scanf("%d", &value);
 
    // shifting the  elements to the right at the end and moves backward copying the element it only performs operation on the elements from (pos) up to end of array the element at indices 0 trough (pos-2) are not touched 
    for (int i = n; i >= pos; i--)
        a[i] = a[i-1];

    a[pos-1] = value; 
    n++; // we increase n(size here because Because we need n to represent the current size during shifting;this hifting operati  increasing it before would make the loop access an invalid index.)

    printf("Array after insertion:\n");
    for (int i  = 0; i < n; i++)
        printf("%d ", a[i]);

    return 0;
}

//calculating the sum og given elements in an array without initialization size
#include <stdio.h>

int main() {
    int a[] = {1, 2, 3, 4};
    int sum = 0;

    int n = sizeof(a) / sizeof(a[0]); // calculate number of elements

    for (int i = 0; i < n; i++) {
        sum += a[i];
    }
    printf("Sum = %d\n", sum);
    return 0;
}

//To know the smallest and largest in an array using (sizeof)
#include <stdio.h>
#include <limits.h> // We need to include this header for INT_MAX and INT_MIN

int main() {
    int a[5] = {3, 4, 5, 6, 7};
    
    int n = sizeof(a) / sizeof(a[0]); // This is the standard way to calculate the number of elements,so the loop knows exactly how many times to run.

    int min = INT_MAX; //Initialize min with the largest possible integer value,it guarantees that the first element of the array will always be smaller.

    int max = INT_MIN;  // Initialize max with the smallest possible integer value it guarantees that the first element of the array will always be larger.

        for (int i = 0; i < n; i++) {
        if (a[i] < min) {
            min = a[i];
        }
        if (a[i] > max) {
            max = a[i];
        }
    }
    printf("min value is %d\n", min);
    printf("max value is %d\n", max);
    
    return 0;
}

//


