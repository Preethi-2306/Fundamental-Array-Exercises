//Traversing an Array
#include <stdio.h>

int main() {
    int n;
    printf("Enter size of array: ");
    scanf("%d", &n);

    int arr[n];   
    for (int i = 0; i < n; i++) {
        printf("Enter number: ");
        scanf("%d", &arr[i]);
    }
    printf("You entered: ");
    for (int j = 0; j < n; j++) {   
        printf("%d ", arr[j]);
    }
    return 0;
}

//Inserting an element in the Array
#include <stdio.h>

int main() {
    int a[100], n, value, pos;

    printf("Enter size of array: ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);

    printf("Enter position (1 to %d): ", n+1);
    scanf("%d", &pos);

    printf("Enter value to insert: ");
    scanf("%d", &value);
 
    // shifting the  elements to the right at the end and moves backward copying the element it only performs operation on the elements from (pos) up to end of array the element at indices 0 trough (pos-2) are not touched 
    for (int i = n; i >= pos; i--)
        a[i] = a[i-1];

    a[pos-1] = value; 
    n++; // we increase n(size here because Because we need n to represent the current size during shifting;this hifting operati  increasing it before would make the loop access an invalid index.)

    printf("Array after insertion:\n");
    for (int i  = 0; i < n; i++)
        printf("%d ", a[i]);

    return 0;
}

// DELETION OF AN ELEMENT FROM AN ARRAY
#include <stdio.h>

int main() {
    int a[100], n, pos;

    printf("Enter size of array: ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);

    printf("Enter position to delete (1 to %d): ", n);
    scanf("%d", &pos);

    if (pos < 1 || pos > n) {
        printf("Invalid position!\n");
    } else {
        // shift elements left from pos
        for (int i = pos - 1; i < n - 1; i++)
            a[i] = a[i + 1];

        n--; // decrease size because one element deleted

        printf("Array after deletion:\n");
        for (int i = 0; i < n; i++)
            printf("%d ", a[i]);
    }

    return 0;
}

//DELETION OF AN ELEMENT IN AN ARRAY NOT BY POSTION BUT DIRECTLY GIVING THE ELEMENT TO BE DELETED
#include <stdio.h>

int main() {
    int a[100], n, value,pos=-1;

    printf("Enter size of array: ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);

    printf("Enter value  to be deleted (1 to %d): ", n);
    scanf("%d", &value);
    
    for(int i=0;i<n;i++){
        if(a[i]==value){
            pos=i;
            break;
        }
    }

    if (pos==-1) {
        printf("element not founf!\n");
    } else {
        
        for (int i = pos ; i < n - 1; i++) //shift elements left from pos

            a[i] = a[i + 1];

        n--; // decrease size because one element deleted

        printf("Array after deletion:\n");
        for (int i = 0; i < n; i++)
            printf("%d ", a[i]);
    }

    return 0;
}

// PRINTING IN REVERSING ORDER JUST IT WILL REVERSE THE ORDER IN ARRAY LIKE PRINTING THE NTH ELEMENT FIRST EXAMPLE IF UR PRINTING THE ARRAY AFTER UR REVERSE LOGIC AND TRY TO PRINT THE ORIGINAL ARRAY
#include <stdio.h>
int main() {
    int a[100],n;
   printf("ENter SIZEOF THE ARRAY:");
   scanf("%d",&n);
   printf("ENter elements OF THE ARRAY:\n");
    for (int i = 0; i < n ; i++) {
       scanf("%d",&a[i]);
    }
    printf("\nReversed ORDER: ");
    for (int i =n-1; i >=0; i--) {
        printf("%d ", a[i]);
    }
    printf("\n");
    return 0;
}

//REVERSING THE ELEMENTS IN THE ARRAY[two pointer approach:
each swap operation handles two elements: one from the beginning and one from the end. 
By the time the pointers meet in the middle, 
every element in the first half of the array has been swapped with its corresponding element in the second half.]:-
#include <stdio.h>
int main() {
    int a[100], n, i, j;
    printf("Enter SIZE OF THE ARRAY: ");
    scanf("%d", &n);

    printf("Enter elements OF THE ARRAY:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }
    // array reverse logic
    for (i = 0, j = n - 1; i < j; i++, j--) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }

    printf("\nReversed array: ");
    for (i = 0; i < n; i++) {
        printf("\na[%d]=%d ", i, a[i]);
    }
    return 0;
}

// SWAPPING ONLY THE HALF ARRAY THE REST OF THE ARRAY SHOULD REMAIN UNTOUCHED:-
#include <stdio.h>
int main() {
    int a[100], n, i;
    printf("Enter SIZE OF THE ARRAY: ");
    scanf("%d", &n);

    printf("Enter elements OF THE ARRAY:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }
    // Swapping the first half of the array with the second half
    int j;
    for (i = 0, j = n / 2; i < n / 2; i++, j++) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
        printf("\nPartially swapped array: ");
        for (i = 0; i < n; i++) {
        printf("\na[%d]=%d ", i, a[i]);
    }
    return 0;
}
//calculating the sum og given elements in an array without initialization size
#include <stdio.h>

int main() {
    int a[] = {1, 2, 3, 4};
    int sum = 0;

    int n = sizeof(a) / sizeof(a[0]); // calculate number of elements

    for (int i = 0; i < n; i++) {
        sum += a[i];
    }
    printf("Sum = %d\n", sum);
    return 0;
}
OUTPUT :-Enter SIZE OF THE ARRAY: 5
Enter elements OF THE ARRAY:
7
6
8
4
9
Partially swapped array: 
a[0]=8 
a[1]=4 
a[2]=7 
a[3]=6 
a[4]=9 

//To know the smallest and largest in an array using (sizeof)
#include <stdio.h>
#include <limits.h> // We need to include this header for INT_MAX and INT_MIN

int main() {
    int a[5] = {3, 4, 5, 6, 7};
    
    int n = sizeof(a) / sizeof(a[0]); // This is the standard way to calculate the number of elements,so the loop knows exactly how many times to run.

    int min = INT_MAX; //Initialize min with the largest possible integer value,it guarantees that the first element of the array will always be smaller.

    int max = INT_MIN;  // Initialize max with the smallest possible integer value it guarantees that the first element of the array will always be larger.

        for (int i = 0; i < n; i++) {
        if (a[i] < min) {
            min = a[i];
        }
        if (a[i] > max) {
            max = a[i];
        }
    }
    printf("min value is %d\n", min);
    printf("max value is %d\n", max);
    
    return 0;
}

// CALCULATING THE SUM OF DIGITS IN AN ARRAY AND STORING IT IN ANOTHER ELEMENT
#include <stdio.h>
int main() {
    int a[3] = {123, 234, 456};
    int b[3] = {};

    for(int i = 0; i < 3; i++) {
        int num = a[i];
        int sum = 0;
        while(num > 0) {
            int digit = num % 10;
            sum += digit;
            num /= 10;
        }
        b[i] = sum;  // store sum into second array
        printf("num is:%d, sum is:%d\n", a[i], sum);
    }
    printf("\nElements stored in b[]: ");
    for(int i = 0; i < 3; i++) //for printing the elements stored on the second array
    {
        printf("%d ", b[i]);
    }

    return 0;
}


